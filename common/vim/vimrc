set nocompatible              " be iMproved, required
filetype off                  " required

" Check if vundle is installed
if ! filereadable(system('echo -n "${XDG_DATA_HOME:-$HOME/.local/share}/vim/bundle/Vundle.vim/autoload/vundle.vim"'))
	echo "Downloading Vundle"
	silent !mkdir -p ${XDG_DATA_HOME:-$HOME/.local/share}/vim/bundle
	silent !git clone https://github.com/VundleVim/Vundle.vim.git ${XDG_DATA_HOME:-$HOME/.local/share}/vim/bundle/Vundle.vim
	autocmd VimEnter * PluginInstall
endif

set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
" set the runtime path to include Vundle and initialize
set rtp+=$XDG_DATA_HOME/vim/bundle/Vundle.vim
call vundle#begin("$XDG_DATA_HOME/vim/bundle")

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'preservim/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'preservim/nerdcommenter'
Plugin 'mboughaba/i3config.vim'
Plugin 'ctrlpvim/ctrlp.vim'
"Plugin 'sngn/vim-i3blocks-syntax'
Plugin 'gerw/vim-tex-syntax'
if executable('latexmk') | Plugin 'lervag/vimtex' | endif
Plugin 'sdysch/vim-i3blocks-syntax'
Plugin 'sdysch/vim-tqfolder-syntax'
Plugin 'sdysch/vim-todolist-syntax'
Plugin 'junegunn/goyo.vim'
Plugin 'vimwiki/vimwiki'
Plugin 'ap/vim-css-color'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NERDTree
let g:NERDTreeDirArrows=0

" Airline
"let g:airline_theme="behelit"
let g:airline_theme="base16_nord"
let g:airline_extensions = []
let g:airline_section_x = '%{strftime("%H:%M %a %d/%m/%y")}'
let g:airline_section_y = ''

" vimwiki
let g:vimwiki_list = [{"path" : "$VIMWIKI"}]

" Goyo
let g:goyo_width = 250
"let g:goyo_linenr = 1

" Enable Goyo (distraction free mode) for composing emails with mutt
autocmd BufRead,BufNewFile /tmp/neomutt* let g:goyo_width=80
autocmd BufRead,BufNewFile /tmp/neomutt* :Goyo

" Enable Goyo (distraction free mode) if git prompts for a commit message
" (git commit called without -m flag)"
autocmd BufRead,BufNewFile *COMMIT_EDITMSG let g:goyo_width=80
autocmd BufRead,BufNewFile *COMMIT_EDITMSG :Goyo

" wildignores
set wildignore=*.o,*.pyc
set wildignore+=*/tmp/*,*.so,*.swp,*.zip 

set encoding=utf-8

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","
let maplocalleader = ','

" Fast saving and quitting
nmap <leader>w :w!<cr>
nmap <leader>q :q<cr>

" fugitive shortcuts
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>

" compiling LaTeX documents (with Makefile)
nmap <leader>r :!make<cr>

" turn off search highlighting
nmap <leader>n :noh<cr>

" easier yanking/pasting to/from system clipboard
noremap <leader>y "+y
noremap <leader>p "+p
noremap <leader>Y "*y
noremap <leader>P "*p

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" colour scheme and syntax
colorscheme koehler
syntax on

" indentation
set autoindent
set copyindent
set cursorline
set hlsearch
set shiftwidth=4
set softtabstop=4
set tabstop=4
set smarttab

" searching
" ignore case when searching
set ignorecase
" try to be smart about case when searching
set smartcase
set incsearch

" error bells off
set noerrorbells

" no backups
set nobackup
set nowb
set noswapfile

set nowrap

" turn relative line numbers on
set relativenumber
set rnu
set number


" show matching brackets
set showmatch

" smarter splitting
set splitright
"set splitbelow

" Remap splits navigation to just CTRL + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-K> <C-w>K
nnoremap <C-H> <C-w>H

" Make adjusing split sizes a bit more friendly
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>

" open terminals

set undolevels=1000

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" modeline
set modeline
set modelines=5

" mac specific (?) to run bashrc when vim is shut
"set shell=bash\ --login

" open terminals
:command Term  terminal
:command Vterm vertical terminal

" === autocmds ===

" open vim at previous line
if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
	\| exe "normal! g'\"" | endif
endif

" automatically backup todo list (see https://github.com/sdysch/todolist)
autocmd VimLeave ~/.todolist/lists/*.todo ! (which backup-todo-list > /dev/null) && backup-todo-list
"autocmd BufWritePost ~/.todolist/lists/*.todo ! (which backup-todo-list > /dev/null) && backup-todo-list

" text wrapping for LaTeX files
autocmd FileType tex set tw=100

" rerun compton when saving its config file
autocmd BufWritePost *compton.conf !killall compton && compton -b --config ~/.config/compton/compton.conf &

" Run xrdb whenever Xdefaults or Xresources are updated
autocmd BufWritePost *Xresources,*Xdefaults !xrdb %

" Fix tex file type set
autocmd BufRead,BufNewFile *.tex set filetype=tex

" Automatically backup vim wiki when saving
" Uses 'backup_vimwiki' command
autocmd BufWritePost *.wiki if executable('backup_vimwiki') | !backup_vimwiki
